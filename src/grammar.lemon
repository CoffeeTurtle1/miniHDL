%header
{
    #include "ast.hpp"
    Node *parse();
}

%include
{
    #include <iostream>
    #include <string.h>
    #include "ast.hpp"
    #include "error.hpp"
    #include "symbolTable.hpp"

    extern int yylineno;

    Node *rootNode = new Node;
    SymbolTable symTable;

    bool compileError = false;
}

%syntax_error
{
    error("Syntax error near line " + std::to_string(yylineno) + " near \""
            + TOKEN + "\".");
    compileError = true;
}

%parse_accept
{
    std::cout << "\033[96mParsing done.\033[39;49m\n";
}

%parse_failure
{
    error("Parsing failed.");
    compileError = true;
}

%stack_overflow
{
    error("Parser stack overflow.");
}

%token_prefix TOK_
%token_type   { const char * }

%left AND.
%left OR.
%right NOT.

%type program { BlockNode * }
program ::= enterScope statements(B) exitScope. { rootNode = B; }
program ::= . // Empty file

// Block of statements
%type statements { BlockNode * }
statements(A) ::= statement(B).
{
    A = new BlockNode;
    A->statements.push_back(B);
}
statements(A) ::= statements(B) statement(C).
{
    B->statements.push_back(C);
    A = B;
}

%type statement { StatementNode * }
// Expression statement
statement(A) ::= expr(B) SEMICOLON. { A = new ExpressionStatementNode(*B); }
// Connection
statement(A) ::= ident(B) CONNECTION expr(D) SEMICOLON.
{
    if (symTable.isIdentInScope(B->ident))
    {
        if (std::get<0>(symTable.lookupIdent(B->ident)) == INPUT)
        {
            compileError = true;
            error("Type error near line " + std::to_string(yylineno) +
                    ": Cannot connect an input to an expression.");
        }
    }
    else
    {
        compileError = true;
        error("Scope error near line " + std::to_string(yylineno) +
                ": Identifier, \"" + B->ident + "\", not in scope.");
    }
    A = new ExpressionStatementNode(*(new BinaryOperationNode("con", *B, *D)));
}

// Module definition
statement(A) ::= MODULE enterScope ident(B) argumentList(C) SEMICOLON statements(D) END exitScope.
{
    if (!symTable.isIdentInScope(B->ident)) // If the ident is not in scope
    {
       symTable.insertSym(MODULE, B->ident);
        A = new ModuleDefinitionNode(*B, C, *D);
    }
    else
    {
        compileError = true;
        error("Scope error near line " + std::to_string(yylineno) +
                ": Redefinition of module \"" + B->ident + "\".");
    }
}
// Empty module
statement ::= MODULE enterScope ident argumentList SEMICOLON END exitScope.

// Module arguments
%type argumentList { std::vector<Argument *> }
argumentList(A) ::= argument(B).
{
    A = std::vector<Argument *>();
    A.push_back(B);
}
argumentList(A) ::= argumentList(B) COMMA argument(C).
{
    B.push_back(C);
    A = B;
}

%type argument { Argument * }
argument(A) ::= INPUT ident(B).
{
    if (!symTable.isIdentInScope(B->ident))
    {
        symTable.insertSym(INPUT, B->ident);
        A = new Argument(INPUT, B);
    }
    else
    {
        compileError = true;
        error("Scope error near line " + std::to_string(yylineno) +
                ": Redefinition of identifier \"" + B->ident + "\".");
    }

}
argument(A) ::= OUTPUT ident(B). 
{
    if (!symTable.isIdentInScope(B->ident))
    {
        symTable.insertSym(OUTPUT, B->ident);
        A = new Argument(OUTPUT, B);
    }
    else
    {
        compileError = true;
        error("Scope error near line " + std::to_string(yylineno) +
                ": Redefinition of identifier \"" + B->ident + "\".");
    }
}

// Expression
%type expr { ExpressionNode * }
expr(A) ::= LBRACKET expr(B) RBRACKET. { A = B; }
expr(A) ::= expr(B) AND expr(D). { A = new BinaryOperationNode("and", *B, *D); }
expr(A) ::= expr(B) OR expr(D).  { A = new BinaryOperationNode("or", *B, *D); }
expr(A) ::= NOT expr(C).         { A = new UnaryOperationNode("not", *C); }
expr(A) ::= TRUE.                { A = new BoolNode(true); }
expr(A) ::= FALSE.               { A = new BoolNode(false); }
expr(A) ::= ident(B).            
{
    if (symTable.isIdentInScope(B->ident))
    {
        if (std::get<0>(symTable.lookupIdent(B->ident)) == OUTPUT)
        {
            compileError = true;
            error("Type error near line " + std::to_string(yylineno) +
                    ": Cannot use an output as a value.");
        }
    }
    else
    {
        compileError = true;
        error("Scope error near line " + std::to_string(yylineno) +
                ": Identifier, \"" + B->ident + "\", not in scope.");
    }
    A = B;
}

%type ident { IdentifierNode * }
ident(A) ::= IDENT(B). { A = new IdentifierNode(B); }

// Scope rules
enterScope ::= . { symTable.enterScope(); }
exitScope ::= .  { symTable.exitScope(); }

%code
{
    extern int yylex();
    extern char *yytext;

    Node *parse()
    {
        void *parser = ParseAlloc(malloc);
        int token;

        // Uncomment for debugging
        // ParseTrace(stdout, "Parser: ");

        while ((token = yylex()))
            Parse(parser, token, strdup(yytext));

        Parse(parser, 0, NULL);
        ParseFree(parser, free);

        if (compileError == true)
            exit(EXIT_FAILURE);

        return rootNode;
    }
}
