%header
{
    void parse(const char *filename);
}

%include
{
    #include <iostream>
    #include <string>
    #include "error.hpp"

    extern int yylineno;
    std::string curTok; // Holds the current token
}

%syntax_error
{
    error(std::to_string(yylineno) + ": Syntax error near \"" + curTok + "\".");
}

%parse_accept
{
    std::cout << "\033[96mParsing done.\033[39;49m\n";
}

%parse_failure
{
    error("Parse failure.");
}

%stack_overflow
{
    error("Stack overflow.");
}

// Main parse function
%code
{
    extern int yylex();
    extern char *yytext;
    
    void parse(const char *filename)
    {
        void *parser = ParseAlloc(malloc);
        int token;

        // Uncomment for debugging
        // ParseTrace(stdout, "Parser: ");

        while ((token = yylex()))
        {
            curTok = yytext;
            Parse(parser, token, curTok.c_str());
        }

        Parse(parser, 0, NULL);
        ParseFree(parser, free);
    }
}

%token_prefix TOK_
%token_type   { const char * }

// Operator precedence
%left AND.
%left XOR.
%left OR.
%right NOT.

// Main program
program ::= compoundStmt.

// Compound statement
compoundStmt ::= statement.
compoundStmt ::= compoundStmt statement.

// Connection
statement ::= ident CONNECTION expr SEMICOLON.

// Wire definition
statement ::= WIRE ident SEMICOLON.
statement ::= WIRE ident CONNECTION expr SEMICOLON.

// When statement
statement ::= WHEN expr SEMICOLON compoundStmt END.
statement ::= WHEN expr SEMICOLON compoundStmt ELSE compoundStmt END.

// Module definition
statement ::= MODULE ident portList SEMICOLON compoundStmt END.

// Port list
portList ::= portDef.
portList ::= portList COMMA portDef.
portDef ::= INPUT ident.
portDef ::= OUTPUT ident.

// Module intatiation
statement ::= ident ident argumentList SEMICOLON.

// Argument list
argumentList ::= expr.
argumentList ::= argumentList COMMA expr.

expr ::= LBRACKET expr RBRACKET.
expr ::= expr AND expr.
expr ::= expr OR expr.
expr ::= expr XOR expr.
expr ::= NOT expr.
expr ::= TRUE.
expr ::= FALSE.
expr ::= ident.

// Identifier
ident ::= IDENT.
